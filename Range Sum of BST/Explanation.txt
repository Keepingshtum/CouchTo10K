First ideas:
Since it's BST, bound it by the low/high
i.e stop searching when the low>parent elem in left subtree
and similarly stop when high<parent elem in right subtree

Traverse the BST and add to sum every time the node is within limits.

Naive Approach: Do a full traversal, sort, and sum values in range (highly inefficient!)

Problem link: https://leetcode.com/explore/challenge/card/november-leetcoding-challenge/566/week-3-november-15th-november-21st/3532/